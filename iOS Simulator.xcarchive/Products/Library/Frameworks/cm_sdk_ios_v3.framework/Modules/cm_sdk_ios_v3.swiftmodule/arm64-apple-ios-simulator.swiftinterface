// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name cm_sdk_ios_v3
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdSupport
import AppTrackingTransparency
import Foundation
import Network
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import cm_sdk_ios_v3
public struct CMPConstants {
  public struct JavaScript {
    public static let javascriptToExecute: Swift.String
  }
}
public typealias LinkClickHandler = (Foundation.URL) -> Swift.Bool
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc public class CMPManager : ObjectiveC.NSObject {
  @objc public static let shared: cm_sdk_ios_v3.CMPManager
  @objc weak public var delegate: (any cm_sdk_ios_v3.CMPManagerDelegate)?
  @objc public func setLinkClickHandler(_ handler: @escaping cm_sdk_ios_v3.LinkClickHandler)
  @objc public func removeLinkClickHandler()
  @objc(setUrlConfig:) public func setUrlConfig(_ config: cm_sdk_ios_v3.UrlConfig)
  @objc(setWebViewConfig:) public func setWebViewConfig(_ config: cm_sdk_ios_v3.ConsentLayerUIConfig)
  @objc(setPresentingViewController:) public func setPresentingViewController(_ viewController: UIKit.UIViewController)
  @objc public func getStatusForPurpose(id: Swift.String) -> cm_sdk_ios_v3.UniqueConsentStatus
  @objc public func getStatusForVendor(id: Swift.String) -> cm_sdk_ios_v3.UniqueConsentStatus
  @objc public func getGoogleConsentModeStatus() -> [Swift.String : Swift.String]
  @objc public func exportCMPInfo() -> Swift.String
  @objc public func getUserStatus() -> cm_sdk_ios_v3.CMPUserStatusResponse
  @objc deinit
}
extension cm_sdk_ios_v3.CMPManager {
  @available(*, deprecated, message: "Use checkAndOpen(jumpToSettings:completion:) instead")
  @objc dynamic public func checkWithServerAndOpenIfNecessary(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func checkAndOpen(jumpToSettings: Swift.Bool = false, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc @available(iOS 13.0.0, *)
  dynamic public func checkAndOpen(jumpToSettings: Swift.Bool = false) async throws
  @objc dynamic public func forceOpen(jumpToSettings: Swift.Bool = false, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func jumpToSettings(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func acceptVendors(_ vendors: [Swift.String], completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func rejectVendors(_ vendors: [Swift.String], completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func acceptPurposes(_ purposes: [Swift.String], updatePurpose: Swift.Bool, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func rejectPurposes(_ purposes: [Swift.String], updateVendor: Swift.Bool, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func rejectAll(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func acceptAll(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func importCMPInfo(_ cmpString: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func resetConsentManagementData(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @available(*, deprecated, message: "Use getUserStatus() instead")
  @objc dynamic public func checkIfConsentIsRequired(completion: @escaping (Swift.Bool) -> Swift.Void)
  @available(*, deprecated, message: "Use getUserStatus() instead")
  @objc dynamic public func hasUserChoice() -> Swift.Bool
  @available(*, deprecated, message: "Use getStatusForPurpose() instead")
  @objc dynamic public func hasPurposeConsent(id: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Use getStatusForVendor() instead")
  @objc dynamic public func hasVendorConsent(id: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Use forceOpen(jumpToSettings:completion:) instead")
  @objc dynamic public func openConsentLayer(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @available(*, deprecated, message: "Use getUserStatus() instead")
  @objc dynamic public func getAllPurposesIDs() -> [Swift.String]
  @available(*, deprecated, message: "Use getUserStatus() instead")
  @objc dynamic public func getEnabledPurposesIDs() -> [Swift.String]
  @available(*, deprecated, message: "Use getUserStatus() instead")
  @objc dynamic public func getDisabledPurposesIDs() -> [Swift.String]
  @available(*, deprecated, message: "Use getUserStatus() instead")
  @objc dynamic public func getAllVendorsIDs() -> [Swift.String]
  @available(*, deprecated, message: "Use getUserStatus() instead")
  @objc dynamic public func getEnabledVendorsIDs() -> [Swift.String]
  @available(*, deprecated, message: "Use getUserStatus() instead")
  @objc dynamic public func getDisabledVendorsIDs() -> [Swift.String]
  @available(iOS 14, *)
  @objc dynamic public func requestATTAuthorization(completion: @escaping (cm_sdk_ios_v3.ATTManager.AuthorizationStatus) -> Swift.Void)
  @available(iOS 14, *)
  @objc dynamic public func getATTAuthorizationStatus() -> cm_sdk_ios_v3.ATTManager.AuthorizationStatus
}
extension cm_sdk_ios_v3.CMPManager {
  @objc dynamic public func didReceiveConsentMessage(_ consent: Swift.String, jsonObject: [Swift.String : Any])
  @objc dynamic public func didReceiveOpenMessage()
  @objc dynamic public func didCloseConsentLayer()
  @objc dynamic public func didReceiveError(_ error: Swift.String)
  @objc dynamic public func getOnClickLinkCallback() -> cm_sdk_ios_v3.LinkClickHandler?
}
@_hasMissingDesignatedInitializers @objc public class CMPUserStatusResponse : ObjectiveC.NSObject {
  @objc final public let status: Swift.String
  @objc final public let vendors: [Swift.String : Swift.String]
  @objc final public let purposes: [Swift.String : Swift.String]
  @objc final public let tcf: Swift.String
  @objc final public let addtlConsent: Swift.String
  @objc final public let regulation: Swift.String
  @objc deinit
}
public enum Position {
  case fullScreen
  case custom(CoreFoundation.CGRect)
}
public enum BackgroundStyle {
  case dimmed(UIKit.UIColor, CoreFoundation.CGFloat)
  case blur(UIKit.UIBlurEffect.Style)
  case color(UIKit.UIColor)
  case none
}
@objc @objcMembers public class ConsentLayerUIConfig : ObjectiveC.NSObject {
  public init(position: cm_sdk_ios_v3.Position = .fullScreen, backgroundStyle: cm_sdk_ios_v3.BackgroundStyle = .dimmed(.black, 0.5), cornerRadius: CoreFoundation.CGFloat = 10, respectsSafeArea: Swift.Bool = true, allowsOrientationChanges: Swift.Bool = true, darkMode: Swift.Bool = false)
  @objc public init(objcPosition: cm_sdk_ios_v3.ConsentLayerUIConfig.CMPPosition, objcBackgroundStyle: cm_sdk_ios_v3.ConsentLayerUIConfig.CMPBackgroundStyle, cornerRadius: CoreFoundation.CGFloat = 0, respectsSafeArea: Swift.Bool = true, allowsOrientationChanges: Swift.Bool = true, darkMode: Swift.Bool = false)
  @_hasMissingDesignatedInitializers @objc public class CMPPosition : ObjectiveC.NSObject {
    @objc public static let fullScreen: cm_sdk_ios_v3.ConsentLayerUIConfig.CMPPosition
    @objc public static func custom(rect: CoreFoundation.CGRect) -> cm_sdk_ios_v3.ConsentLayerUIConfig.CMPPosition
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objc public class CMPBackgroundStyle : ObjectiveC.NSObject {
    @objc public static func dimmed(color: UIKit.UIColor, alpha: CoreFoundation.CGFloat) -> cm_sdk_ios_v3.ConsentLayerUIConfig.CMPBackgroundStyle
    @objc public static func blur(style: UIKit.UIBlurEffect.Style) -> cm_sdk_ios_v3.ConsentLayerUIConfig.CMPBackgroundStyle
    @objc public static func color(_ color: UIKit.UIColor) -> cm_sdk_ios_v3.ConsentLayerUIConfig.CMPBackgroundStyle
    @objc public static let none: cm_sdk_ios_v3.ConsentLayerUIConfig.CMPBackgroundStyle
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class ATTManager {
  public static let shared: cm_sdk_ios_v3.ATTManager
  @objc public enum AuthorizationStatus : Swift.Int {
    case notDetermined = 0
    case restricted = 1
    case denied = 2
    case authorized = 3
    public init?(rawValue: Swift.Int)
    @available(iOS 14, *)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public func requestTrackingAuthorization(completion: @escaping (cm_sdk_ios_v3.ATTManager.AuthorizationStatus) -> Swift.Void)
  @objc public func getTrackingAuthorizationStatus() -> cm_sdk_ios_v3.ATTManager.AuthorizationStatus
  @objc public func getIDFA() -> Swift.String?
  @objc deinit
}
@objc public protocol CMPManagerDelegate {
  @objc func didReceiveConsent(consent: Swift.String, jsonObject: [Swift.String : Any])
  @objc func didShowConsentLayer()
  @objc func didCloseConsentLayer()
  @objc func didReceiveError(error: Swift.String)
  @objc func didChangeATTStatus(oldStatus: Swift.Int, newStatus: Swift.Int, lastUpdated: Foundation.Date?)
}
@objcMembers @objc public class UrlConfig : ObjectiveC.NSObject {
  @objc public init(id: Swift.String, domain: Swift.String, language: Swift.String, appName: Swift.String)
  @objc deinit
}
@objc public enum UniqueConsentStatus : Swift.Int {
  case choiceDoesntExist
  case granted
  case denied
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14, *)
extension cm_sdk_ios_v3.ATTManager.AuthorizationStatus : Swift.Equatable {}
@available(iOS 14, *)
extension cm_sdk_ios_v3.ATTManager.AuthorizationStatus : Swift.Hashable {}
@available(iOS 14, *)
extension cm_sdk_ios_v3.ATTManager.AuthorizationStatus : Swift.RawRepresentable {}
extension cm_sdk_ios_v3.UniqueConsentStatus : Swift.Equatable {}
extension cm_sdk_ios_v3.UniqueConsentStatus : Swift.Hashable {}
extension cm_sdk_ios_v3.UniqueConsentStatus : Swift.RawRepresentable {}
