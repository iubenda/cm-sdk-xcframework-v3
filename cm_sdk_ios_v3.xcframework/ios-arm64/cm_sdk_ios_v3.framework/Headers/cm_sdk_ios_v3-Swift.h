#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef CM_SDK_IOS_V3_SWIFT_H
#define CM_SDK_IOS_V3_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="cm_sdk_ios_v3",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@protocol CMPManagerDelegate;
@class NSURL;
@class UrlConfig;
@class ConsentLayerUIConfig;
@class UIViewController;
@class NSString;
enum UniqueConsentStatus : NSInteger;
@class CMPUserStatusResponse;

SWIFT_CLASS("_TtC13cm_sdk_ios_v310CMPManager")
@interface CMPManager : NSObject
/// Shared instance of the CMPManager
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CMPManager * _Nonnull shared;)
+ (CMPManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Delegate that receives callbacks about consent events
@property (nonatomic, weak) id <CMPManagerDelegate> _Nullable delegate;
/// Sets a handler for when links are clicked in the consent layer
/// \param handler The handler that determines if a link should be opened
///
- (void)setLinkClickHandler:(BOOL (^ _Nonnull)(NSURL * _Nonnull))handler;
/// Removes the previously set link click handler
- (void)removeLinkClickHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Sets the URL configuration for the consent manager
/// \param config The URL configuration
///
- (void)setUrlConfig:(UrlConfig * _Nonnull)config;
/// Sets the UI configuration for the consent layer
/// \param config The UI configuration
///
- (void)setWebViewConfig:(ConsentLayerUIConfig * _Nonnull)config;
/// Sets the view controller that will present the consent layer
/// \param viewController The presenting view controller
///
- (void)setPresentingViewController:(UIViewController * _Nonnull)viewController;
/// Gets the status for a specific purpose
/// \param id The purpose ID
///
///
/// returns:
/// The consent status
- (enum UniqueConsentStatus)getStatusForPurposeWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Gets the status for a specific vendor
/// \param id The vendor ID
///
///
/// returns:
/// The consent status
- (enum UniqueConsentStatus)getStatusForVendorWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nonnull)getGoogleConsentModeStatus SWIFT_WARN_UNUSED_RESULT;
/// Exports the CMP string . The results should be used in tandem with the importCMPInfo method, AS-IS
/// in mobile apps that mix native content with web content.
///
/// returns:
/// The CMP information string
- (NSString * _Nonnull)exportCMPInfo SWIFT_WARN_UNUSED_RESULT;
/// Gets the current consent status for all purposes and vendors
///
/// returns:
/// A CMPUserStatusResponse object containing all consent statuses
- (CMPUserStatusResponse * _Nonnull)getUserStatus SWIFT_WARN_UNUSED_RESULT;
@end


@interface CMPManager (SWIFT_EXTENSION(cm_sdk_ios_v3))
/// Called when consent is received from the user
/// \param consent The consent string
///
/// \param jsonObject The detailed consent information as a dictionary
///
- (void)didReceiveConsentMessage:(NSString * _Nonnull)consent jsonObject:(NSDictionary<NSString *, id> * _Nonnull)jsonObject;
/// Called when the consent layer is shown
- (void)didReceiveOpenMessage;
/// Called when the SDK decided that the consent layer should not displayed due to the fact that
/// consents are up-to-date and a new consent was not needed.
- (void)didCloseConsentLayer;
/// Called when an error occurs
/// \param error The error message
///
- (void)didReceiveError:(NSString * _Nonnull)error;
/// Called when a link is clicked inside the consent layer, so developers can decide whether to
/// navigate to the URL link inside the webview, block it or open the URL link in another browser
/// \param error The error message
///
- (BOOL (^ _Nullable)(NSURL * _Nonnull))getOnClickLinkCallback SWIFT_WARN_UNUSED_RESULT;
@end

@class NSError;

@interface CMPManager (SWIFT_EXTENSION(cm_sdk_ios_v3))
- (void)checkWithServerAndOpenIfNecessaryWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use checkAndOpen(jumpToSettings:completion:) instead");
/// Checks if consent is needed and opens the consent layer if necessary
/// \param jumpToSettings Whether to jump directly to the settings page
///
/// \param completion Callback with an optional error
///
- (void)checkAndOpenWithJumpToSettings:(BOOL)jumpToSettings completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Checks if consent is needed and opens the consent layer if necessary, async version
/// \param jumpToSettings Whether to jump directly to the settings page
///
/// \param completion Callback with an optional error
///
- (void)checkAndOpenWithJumpToSettings:(BOOL)jumpToSettings completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=13.0.0);
/// Forces the consent layer to open
/// \param jumpToSettings Whether to jump directly to the settings page
///
/// \param completion Callback with an optional error
///
- (void)forceOpenWithJumpToSettings:(BOOL)jumpToSettings completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Jumps directly to the settings page
/// \param completion Callback with an optional error
///
- (void)jumpToSettingsWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Accepts consent for specific vendors
/// \param vendors Array of vendor IDs to accept
///
/// \param completion Callback with an optional error
///
- (void)acceptVendors:(NSArray<NSString *> * _Nonnull)vendors completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Rejects consent for specific vendors
/// \param vendors Array of vendor IDs to reject
///
/// \param completion Callback with an optional error
///
- (void)rejectVendors:(NSArray<NSString *> * _Nonnull)vendors completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Accepts consent for specific purposes
/// \param purposes Array of purpose IDs to accept
///
/// \param updatePurpose Whether to update related vendors
///
/// \param completion Callback with an optional error
///
- (void)acceptPurposes:(NSArray<NSString *> * _Nonnull)purposes updatePurpose:(BOOL)updatePurpose completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Rejects consent for specific purposes
/// \param purposes Array of purpose IDs to reject
///
/// \param updateVendor Whether to update related vendors
///
/// \param completion Callback with an optional error
///
- (void)rejectPurposes:(NSArray<NSString *> * _Nonnull)purposes updateVendor:(BOOL)updateVendor completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Rejects all consents. It’s the similar behaviour of clicking in the Accept All button in the consent layer.
/// It denies consents to all vendors and purposes.
/// \param completion Callback with an optional error
///
- (void)rejectAllWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Accepts all consents. It’s the similar behaviour of clicking in the Accept All button in the consent layer.
/// It grants consents to all vendors and purposes.
/// \param completion Callback with an optional error
///
- (void)acceptAllWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Imports a CMP information string. It should be used in tandem with the exportCMPInfo on mobile apps
/// that mix native content with web content.
/// \param cmpString The CMP string to import
///
/// \param completion Callback with an optional error
///
- (void)importCMPInfo:(NSString * _Nonnull)cmpString completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Resets all consent management data
/// \param completion Callback with an optional error
///
- (void)resetConsentManagementDataWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)checkIfConsentIsRequiredWithCompletion:(void (^ _Nonnull)(BOOL))completion SWIFT_DEPRECATED_MSG("Use getUserStatus() instead");
- (BOOL)hasUserChoice SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getUserStatus() instead");
- (BOOL)hasPurposeConsentWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getStatusForPurpose() instead");
- (BOOL)hasVendorConsentWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getStatusForVendor() instead");
- (void)openConsentLayerWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use forceOpen(jumpToSettings:completion:) instead");
- (NSArray<NSString *> * _Nonnull)getAllPurposesIDs SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getUserStatus() instead");
- (NSArray<NSString *> * _Nonnull)getEnabledPurposesIDs SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getUserStatus() instead");
- (NSArray<NSString *> * _Nonnull)getDisabledPurposesIDs SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getUserStatus() instead");
- (NSArray<NSString *> * _Nonnull)getAllVendorsIDs SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getUserStatus() instead");
- (NSArray<NSString *> * _Nonnull)getEnabledVendorsIDs SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getUserStatus() instead");
- (NSArray<NSString *> * _Nonnull)getDisabledVendorsIDs SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getUserStatus() instead");
@end

@class NSDate;

SWIFT_PROTOCOL("_TtP13cm_sdk_ios_v318CMPManagerDelegate_")
@protocol CMPManagerDelegate
- (void)didReceiveConsentWithConsent:(NSString * _Nonnull)consent jsonObject:(NSDictionary<NSString *, id> * _Nonnull)jsonObject;
- (void)didShowConsentLayer;
- (void)didCloseConsentLayer;
- (void)didReceiveErrorWithError:(NSString * _Nonnull)error;
- (void)didChangeATTStatusWithOldStatus:(NSInteger)oldStatus newStatus:(NSInteger)newStatus lastUpdated:(NSDate * _Nullable)lastUpdated;
@end


SWIFT_CLASS("_TtC13cm_sdk_ios_v321CMPUserStatusResponse")
@interface CMPUserStatusResponse : NSObject
/// The overall consent status (“choiceExists” or “choiceDoesntExist”)
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
/// Dictionary of vendor IDs to their consent status (“granted” or “denied”)
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull vendors;
/// Dictionary of purpose IDs to their consent status (“granted” or “denied”)
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull purposes;
/// The TCF (Transparency & Consent Framework) string
@property (nonatomic, readonly, copy) NSString * _Nonnull tcf;
/// Additional consent information
@property (nonatomic, readonly, copy) NSString * _Nonnull addtlConsent;
/// The current regulation key (e.g., “GDPR”)
@property (nonatomic, readonly, copy) NSString * _Nonnull regulation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CMPPosition;
@class CMPBackgroundStyle;

SWIFT_CLASS("_TtC13cm_sdk_ios_v320ConsentLayerUIConfig")
@interface ConsentLayerUIConfig : NSObject
/// The corner radius of the consent layer
@property (nonatomic, readonly) CGFloat cornerRadius;
/// Whether the consent layer respects the safe area
@property (nonatomic, readonly) BOOL respectsSafeArea;
/// Whether the consent layer allows orientation changes
@property (nonatomic, readonly) BOOL allowsOrientationChanges;
/// Whether to use dark mode in the consent layer
@property (nonatomic, readonly) BOOL darkMode;
/// Initializes a new consent layer UI configuration using Objective-C compatible classes
/// \param objcPosition The position of the consent layer
///
/// \param objcBackgroundStyle The background style of the consent layer
///
/// \param cornerRadius The corner radius of the consent layer
///
/// \param respectsSafeArea Whether the consent layer respects the safe area
///
/// \param allowsOrientationChanges Whether the consent layer allows orientation changes
///
/// \param darkMode Whether to use dark mode in the consent layer
///
- (nonnull instancetype)initWithObjcPosition:(CMPPosition * _Nonnull)objcPosition objcBackgroundStyle:(CMPBackgroundStyle * _Nonnull)objcBackgroundStyle cornerRadius:(CGFloat)cornerRadius respectsSafeArea:(BOOL)respectsSafeArea allowsOrientationChanges:(BOOL)allowsOrientationChanges darkMode:(BOOL)darkMode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Objective-C compatible wrapper for Position
SWIFT_CLASS("_TtCC13cm_sdk_ios_v320ConsentLayerUIConfig11CMPPosition")
@interface CMPPosition : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CMPPosition * _Nonnull fullScreen;)
+ (CMPPosition * _Nonnull)fullScreen SWIFT_WARN_UNUSED_RESULT;
+ (CMPPosition * _Nonnull)customWithRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;

/// Objective-C compatible wrapper for BackgroundStyle
SWIFT_CLASS("_TtCC13cm_sdk_ios_v320ConsentLayerUIConfig18CMPBackgroundStyle")
@interface CMPBackgroundStyle : NSObject
/// Creates a dimmed background style
/// \param color The background color
///
/// \param alpha The alpha value
///
///
/// returns:
/// A CMPBackgroundStyle instance
+ (CMPBackgroundStyle * _Nonnull)dimmedWithColor:(UIColor * _Nonnull)color alpha:(CGFloat)alpha SWIFT_WARN_UNUSED_RESULT;
/// Creates a blur background style
/// \param style The blur effect style
///
///
/// returns:
/// A CMPBackgroundStyle instance
+ (CMPBackgroundStyle * _Nonnull)blurWithStyle:(enum UIBlurEffectStyle)style SWIFT_WARN_UNUSED_RESULT;
/// Creates a solid color background style
/// \param color The background color
///
///
/// returns:
/// A CMPBackgroundStyle instance
+ (CMPBackgroundStyle * _Nonnull)color:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// No background
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CMPBackgroundStyle * _Nonnull none;)
+ (CMPBackgroundStyle * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, UniqueConsentStatus, open) {
  UniqueConsentStatusChoiceDoesntExist = 0,
  UniqueConsentStatusGranted = 1,
  UniqueConsentStatusDenied = 2,
};


SWIFT_CLASS("_TtC13cm_sdk_ios_v39UrlConfig")
@interface UrlConfig : NSObject
/// Initializes a new URL configuration
/// \param id The Code-ID for this consent configuration, obtained from the CMP’s dashboard.
///
/// \param domain The domain to use for the consent manager service, obtained from the CMP’s dashboard.
///
/// \param language The language code o determine in which language the consent layer text should be displayed.
///
/// \param appName The name of the app that is using the consent manager. Used for reporting cases.
///
/// \param idfa The IDFA of the user’s device, if available.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id domain:(NSString * _Nonnull)domain language:(NSString * _Nonnull)language appName:(NSString * _Nonnull)appName idfa:(NSString * _Nullable)idfa OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
